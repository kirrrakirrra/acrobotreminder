import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, update
from config import ADMIN_ID, NOTIFY_ID, GROUP_ID, TIMEZONE_OFFSET

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
groups = [
    {
        "name": "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Monday", "Wednesday", "Friday"],
        "time": "17:15",
        "thread_id": 2225,
    },
    {
        "name": "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Monday", "Wednesday", "Friday"],
        "time": "18:30",
        "thread_id": 7,
    },
    {
        "name": "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Tuesday", "Thursday", "Saturday"],
        "time": "17:30",
        "thread_id": 105,
    },
]

cancel_messages = {
    "visa": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üõÇ –°–µ–≥–æ–¥–Ω—è —è –Ω–∞ –≤–∏–∑–∞—Ä–∞–Ω–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ —Ö–æ—Ä–æ—à–æ, —É–≤–∏–¥–∏–º—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! ‚òÄÔ∏è",
    "illness": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ü§í –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø—Ä–∏–±–æ–ª–µ–ª –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –ù–∞–¥–µ—é—Å—å –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –≤–∞–º–∏! –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è! üå∑",
    "unwell": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üòå –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ–≤–∞–∂–Ω–æ –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚Äî —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏! üí™",
    "unexpected": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚ö†Ô∏è –ü–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üòä",
    "tech": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚öôÔ∏è –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∑–∞–ª–µ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—å. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! ü§∏‚Äç‚ôÄÔ∏è",
}

def get_decision_keyboard(group_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{group_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"no|{group_id}")],
        [InlineKeyboardButton("‚è≠ –ù–µ—Ç, –Ω–æ —è —Å–∞–º –Ω–∞–ø–∏—à—É –≤ –≥—Ä—É–ø–ø—É", callback_data=f"skip|{group_id}")],
    ])

def get_reason_keyboard(group_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§í –ë–æ–ª–µ–∑–Ω—å", callback_data=f"reason|{group_id}|illness")],
        [InlineKeyboardButton("üõÇ –í–∏–∑–∞—Ä–∞–Ω", callback_data=f"reason|{group_id}|visa")],
        [InlineKeyboardButton("üòå –ü–ª–æ—Ö–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ", callback_data=f"reason|{group_id}|unwell")],
        [InlineKeyboardButton("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ", callback_data=f"reason|{group_id}|unexpected")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–µ—Ö. –Ω–µ–ø–æ–ª–∞–¥–∫–∏", callback_data=f"reason|{group_id}|tech")],
    ])

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É
async def send_admin_reminders(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.utcnow() + datetime.timedelta(hours=TIMEZONE_OFFSET)
    weekday = now.strftime("%A")
    for idx, group in enumerate(groups):
        if weekday in group["days"]:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –≤ {group['time']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
                reply_markup=get_decision_keyboard(idx)
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback'–æ–≤
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data.startswith("yes|"):
        group_id = int(data.split("|")[1])
        group = groups[group_id]
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=group["thread_id"],
            text=f"–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ó–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ {group['time']} ü§∏üèªü§∏üèª‚Äç‚ôÄÔ∏è"
        )

    elif data.startswith("no|"):
        group_id = int(data.split("|")[1])
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
            reply_markup=get_reason_keyboard(group_id)
        )

    elif data.startswith("skip|"):
        await query.message.reply_text("–•–æ—Ä–æ—à–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à—É –≤ –≥—Ä—É–ø–ø—É.")

    elif data.startswith("reason|"):
        _, group_id, reason_code = data.split("|")
        group_id = int(group_id)
        group = groups[group_id]
        message = cancel_messages.get(reason_code, "–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.")
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=group["thread_id"],
            text=message)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def send_startup_notification(app):
    try:
        await app.bot.send_message(chat_id=NOTIFY_ID, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ–µ
async def send_crash_notification(app, error: Exception):
    try:
        await app.bot.send_message(
            chat_id=NOTIFY_ID,
            text=f"‚ùå –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n{str(error)}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ crash-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–∞ –≤ 12:30 –ø–æ –í—å–µ—Ç–Ω–∞–º—É
def setup_daily_jobs(application):
    from datetime import time
    job_time = time(hour=12, minute=53)
    application.job_queue.run_daily(
        send_admin_reminders,
        time=job_time,
        name="daily_admin_check"
    )
