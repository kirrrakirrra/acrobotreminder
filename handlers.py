from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from storage_module import abon_data, save_abons, ADMIN_ID, history_data, save_history
from keyboards_module import (
    get_mark_keyboard, get_check_keyboard, get_pastuse_keyboard,
    get_rename_keyboard, get_date_history_keyboard
)
import datetime


def get_back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])


async def handle_mark_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = context.user_data.setdefault("selected_abons", set())
    abon_name = query.data.replace("mark_", "")
    if abon_name in selected:
        selected.remove(abon_name)
    else:
        selected.add(abon_name)
    await query.edit_message_reply_markup(reply_markup=get_mark_keyboard(selected))


async def handle_mark_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = context.user_data.pop("selected_abons", set())
    if not selected:
        await query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        return
    now = datetime.datetime.now().strftime("%Y-%m-%d")
    for name in selected:
        if now not in abon_data[name]["used_sessions"]:
            abon_data[name]["used_sessions"].append(now)
        if not abon_data[name]["start_date"]:
            abon_data[name]["start_date"] = now
        history_data[now].append({"action": "mark", "abon": name})
    save_abons()
    save_history()
    await query.edit_message_text("–ü–æ—Å–µ—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ")


async def handle_check_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    abon_name = query.data.replace("check_", "")
    data = abon_data[abon_name]
    used = data["used_sessions"]
    text = f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç *{abon_name}*\n"
    text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(used)}/8\n"
    if used:
        text += f"–ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: {data['start_date']}\n"
        text += "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü —Å –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_back_keyboard())


async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=get_check_keyboard())
