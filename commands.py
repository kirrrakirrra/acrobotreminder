from telegram import Update
from telegram.ext import ContextTypes
from storage import abon_data, save_abons
from keyboards import get_mark_keyboard

# –î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç
async def add_abonement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.effective_chat.title or "test"
    if group_name not in abon_data:
        abon_data[group_name] = {}

    args = context.args
    if not args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    abonement_name = " ".join(args)
    abon_data[group_name][abonement_name] = []
    save_abons(abon_data)  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await update.message.reply_text(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç \"{abonement_name}\" –¥–æ–±–∞–≤–ª–µ–Ω.")

# –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ
async def mark_visit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.effective_chat.title or "test"
    if group_name not in abon_data or not abon_data[group_name]:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
        return

    reply_markup = get_mark_keyboard(group_name)
    await update.message.reply_text("–û—Ç–º–µ—Ç—å—Ç–µ –ø–æ—Å–µ—â–µ–Ω–∏—è:", reply_markup=reply_markup)

# –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç)
async def past_use(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.effective_chat.title or "test"
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /pastuse [–∏–º—è] [YYYY-MM-DD]")
        return

    abonement_name = " ".join(args[:-1])
    date = args[-1]
    if group_name not in abon_data or abonement_name not in abon_data[group_name]:
        await update.message.reply_text("–¢–∞–∫–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    abon_data[group_name][abonement_name].append(date)
    save_abons(abon_data)  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–µ—â–µ–Ω–∏–µ {abonement_name} –∑–∞ {date}.")

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç
async def rename_abonement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.effective_chat.title or "test"
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /rename [—Å—Ç–∞—Ä–æ–µ –∏–º—è] [–Ω–æ–≤–æ–µ –∏–º—è]")
        return

    old_name = args[0]
    new_name = " ".join(args[1:])
    if group_name not in abon_data or old_name not in abon_data[group_name]:
        await update.message.reply_text("–¢–∞–∫–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    abon_data[group_name][new_name] = abon_data[group_name].pop(old_name)
    save_abons(abon_data)  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    await update.message.reply_text(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç \"{old_name}\" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ \"{new_name}\".")

# –£–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç
async def delete_abonement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.effective_chat.title or "test"
    args = context.args
    if not args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    abonement_name = " ".join(args)
    if group_name not in abon_data or abonement_name not in abon_data[group_name]:
        await update.message.reply_text("–¢–∞–∫–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    del abon_data[group_name][abonement_name]
    save_abons(abon_data)  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await update.message.reply_text(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç \"{abonement_name}\" —É–¥–∞–ª—ë–Ω.")

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
async def list_abonements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.effective_chat.title or "test"
    if group_name not in abon_data or not abon_data[group_name]:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    message = "üìã –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n\n"
    for name, visits in abon_data[group_name].items():
        message += f"üîπ {name} ‚Äî {len(visits)} –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
    await update.message.reply_text(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π
async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.effective_chat.title or "test"
    if group_name not in abon_data or not abon_data[group_name]:
        await update.message.reply_text("–ù–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    message = "üìñ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π:\n\n"
    for name, visits in abon_data[group_name].items():
        dates = ", ".join(visits) if visits else "–Ω–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π"
        message += f"üîπ {name}: {dates}\n"
    await update.message.reply_text(message)
