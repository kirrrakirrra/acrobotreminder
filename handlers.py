from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from storage import abon_data, save_abons, ADMIN_ID, history_data, save_history
from keyboards import (
    get_mark_keyboard, get_check_keyboard, get_pastuse_keyboard,
    get_rename_keyboard, get_date_history_keyboard
)
import datetime


def get_back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])


async def handle_mark_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = context.user_data.setdefault("selected_abons", set())
    abon_name = query.data.replace("mark_", "")
    if abon_name in selected:
        selected.remove(abon_name)
    else:
        selected.add(abon_name)
    await query.edit_message_reply_markup(reply_markup=get_mark_keyboard(selected))


async def handle_mark_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = context.user_data.pop("selected_abons", set())
    if not selected:
        await query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        return
    now = datetime.datetime.now().strftime("%Y-%m-%d")
    for name in selected:
        if now not in abon_data[name]["used_sessions"]:
            abon_data[name]["used_sessions"].append(now)
        if not abon_data[name]["start_date"]:
            abon_data[name]["start_date"] = now
        history_data[now].append({"action": "mark", "abon": name})
    save_abons()
    save_history()
    await query.edit_message_text("–ü–æ—Å–µ—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ")


async def handle_check_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    abon_name = query.data.replace("check_", "")
    data = abon_data[abon_name]
    used = data["used_sessions"]
    text = f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç *{abon_name}*\n"
    text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(used)}/8\n"
    if used:
        text += f"–ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: {data['start_date']}\n"
        text += "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü —Å –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_back_keyboard())


async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=get_check_keyboard())


# --- pastuse: –≤—ã–±–æ—Ä –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ ‚Üí –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π ---

async def handle_pastuse_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    abon_name = query.data.replace("pastuse_", "")
    context.user_data["pastuse_abon"] = abon_name
    context.user_data["selected_dates"] = set()
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ *{abon_name}*:",
                                  parse_mode="Markdown",
                                  reply_markup=get_pastuse_keyboard(set()))


async def handle_pastuse_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    date = query.data.replace("date_", "")
    selected = context.user_data.setdefault("selected_dates", set())
    if date in selected:
        selected.remove(date)
    else:
        selected.add(date)
    await query.edit_message_reply_markup(reply_markup=get_pastuse_keyboard(selected))


async def handle_pastuse_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    abon_name = context.user_data.pop("pastuse_abon", None)
    selected = context.user_data.pop("selected_dates", set())
    if not abon_name or not selected:
        await query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        return
    for date in selected:
        if date not in abon_data[abon_name]["used_sessions"]:
            abon_data[abon_name]["used_sessions"].append(date)
        if not abon_data[abon_name]["start_date"]:
            abon_data[abon_name]["start_date"] = date
        history_data[date].append({"action": "pastuse", "abon": abon_name})
    save_abons()
    save_history()
    await query.edit_message_text("–ü—Ä–æ—à–ª—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚úÖ")

# --- rename ---

async def handle_rename_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    abon_name = query.data.replace("rename_", "")
    context.user_data["rename_abon"] = abon_name
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ *{abon_name}*:", parse_mode="Markdown")


async def handle_rename_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    abon_name = context.user_data.pop("rename_abon", None)
    if not abon_name:
        return
    new_name = update.message.text.strip()
    if new_name in abon_data:
        await update.message.reply_text("–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    abon_data[new_name] = abon_data.pop(abon_name)
    save_abons()
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    history_data[today].append({"action": "rename", "abon": abon_name, "new": new_name})
    save_history()
    await update.message.reply_text("–ò–º—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# --- delete ---

async def handle_delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    abon_name = query.data.replace("delete_", "")
    if abon_name in abon_data:
        abon_data[abon_name]["deleted"] = True
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        history_data[today].append({"action": "delete", "abon": abon_name})
        save_abons()
        save_history()
        await query.edit_message_text(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç *{abon_name}* –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π ‚ùå", parse_mode="Markdown")
    else:
        await query.edit_message_text("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- list ---

async def handle_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not abon_data:
        await update.message.reply_text("–ù–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    active_abons = {
        name: data for name, data in abon_data.items()
        if not data.get("deleted", False)
    }

    if not active_abons:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    text = "üìã *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:*\n\n"
    for name, data in active_abons.items():
        used = len(data["used_sessions"])
        start = data["start_date"]
        text += f"‚Ä¢ *{name}*: {used}/8"
        if start:
            text += f" (—Å {start})"
        text += "\n"

    await update.message.reply_text(text, parse_mode="Markdown")




# --- cancel messages & reminders ---

cancel_messages = {
    "visa": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üõÇ –°–µ–≥–æ–¥–Ω—è —è –Ω–∞ –≤–∏–∑–∞—Ä–∞–Ω–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ —Ö–æ—Ä–æ—à–æ, —É–≤–∏–¥–∏–º—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! ‚òÄÔ∏è",
    "illness": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ü§í –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø—Ä–∏–±–æ–ª–µ–ª –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –ù–∞–¥–µ—é—Å—å –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –≤–∞–º–∏! –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è! üå∑",
    "unwell": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üòå –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ–≤–∞–∂–Ω–æ –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚Äî —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏! üí™",
    "unexpected": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚ö†Ô∏è –ü–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üòä",
    "tech": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚öôÔ∏è –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∑–∞–ª–µ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—å. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! ü§∏‚Äç‚ôÄÔ∏è",
}


groups = [
    {"name": "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã", "days": ["Monday", "Wednesday", "Friday"], "time": "17:15", "thread_id": 2225},
    {"name": "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã", "days": ["Monday", "Wednesday", "Friday"], "time": "18:30", "thread_id": 7},
    {"name": "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã", "days": ["Tuesday", "Thursday"], "time": "17:30", "thread_id": 2226},
]

pending = {}

async def ask_admin(app, group_id, group):
    msg = await app.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –≤ {group['time']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{group_id}"),
             InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"no|{group_id}")],
            [InlineKeyboardButton("‚è≠ –ù–µ—Ç, –Ω–æ —è —Å–∞–º –Ω–∞–ø–∏—à—É –≤ –≥—Ä—É–ø–ø—É", callback_data=f"skip|{group_id}")],
        ])
    )
    pending[msg.message_id] = group


async def scheduler(app):
    while True:
        now_utc = datetime.datetime.utcnow()
        now = now_utc + datetime.timedelta(hours=7)
        if now.hour == 12 and now.minute == 30:
            weekday = now.strftime("%A")
            for idx, group in enumerate(groups):
                if weekday in group["days"]:
                    await ask_admin(app, idx, group)
            await asyncio.sleep(60)
        await asyncio.sleep(20)


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    action = data[0]
    group_id = int(data[1])
    group = groups[group_id]

    if action == "yes":
        await context.bot.send_message(
            chat_id=-1001820363527,
            message_thread_id=group["thread_id"],
            text=f"–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ó–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ {group['time']} ü§∏üèªü§∏üèª‚Äç‚ôÄÔ∏è"
        )
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

    elif action == "no":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è:",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("ü§í –ë–æ–ª–µ–∑–Ω—å", callback_data=f"reason|{group_id}|illness")],
                                          [InlineKeyboardButton("üõÇ –í–∏–∑–∞—Ä–∞–Ω", callback_data=f"reason|{group_id}|visa")],
                                          [InlineKeyboardButton("üòå –ü–ª–æ—Ö–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ", callback_data=f"reason|{group_id}|unwell")],
                                          [InlineKeyboardButton("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ", callback_data=f"reason|{group_id}|unexpected")],
                                          [InlineKeyboardButton("‚öôÔ∏è –¢–µ—Ö. –Ω–µ–ø–æ–ª–∞–¥–∫–∏", callback_data=f"reason|{group_id}|tech")],
                                      ]))

    elif action == "reason":
        reason_key = data[2]
        message = cancel_messages.get(reason_key, "–ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.")
        await context.bot.send_message(
            chat_id=-1001820363527,
            message_thread_id=group["thread_id"],
            text=message
        )
        await query.edit_message_text("–û—Ç–º–µ–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ‚ùå")

    elif action == "skip":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º.")
