import asyncio
import datetime
import logging
import json
import os
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    filename="bot.log",
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 986242491
NOTIFY_ID = 1291715324
GROUP_ID = -1001820363527

abon_file = "abons.json"
abon_data = {}
abon_history = []
abon_pastuse_pending = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
abon_pastuse_dates = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç –¥–ª—è pastuse
abon_rename_pending = set()  # –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã –æ–∂–∏–¥–∞—é—â–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
abon_add_pending = set()  # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
abon_mark_pending = set()  # –î–ª—è –∫–æ–º–∞–Ω–¥—ã mark (–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –≤ –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç–µ)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø
groups = [
    {"name": "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã", "days": ["Monday", "Wednesday", "Friday"], "time": "17:15", "thread_id": 2225},
    {"name": "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã", "days": ["Monday", "Wednesday", "Friday"], "time": "18:30", "thread_id": 7},
    {"name": "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã", "days": ["Tuesday", "Thursday"], "time": "17:30", "thread_id": 2226},
]

pending = {}

cancel_messages = {
    "visa": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üåÇ –°–µ–≥–æ–¥–Ω—è —è –Ω–∞ –≤–∏–∑–∞—Ä–∞–Ω–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ —Ö–æ—Ä–æ—à–æ, —É–≤–∏–¥–∏–º—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! ‚òÄÔ∏è",
    "illness": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ü§î –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø—Ä–∏–±–æ–ª–µ–ª –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –ù–∞–¥–µ—é—Å—å –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –≤–∞–º–∏! –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è! üå∑",
    "unwell": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üòå –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ–≤–∞–∂–Ω–æ –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚Äî —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏! üí™",
    "unexpected": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚ö†Ô∏è –ü–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üòä",
    "tech": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚öôÔ∏è –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∑–∞–ª–µ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—å. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! üßò‚Äç‚ôÄÔ∏è",
}

# –£—Ç–∏–ª–∏—Ç—ã

def save_abons():
    with open(abon_file, "w", encoding="utf-8") as f:
        json.dump(abon_data, f, ensure_ascii=False, indent=2)

def load_abons():
    global abon_data
    if os.path.exists(abon_file):
        with open(abon_file, "r", encoding="utf-8") as f:
            abon_data = json.load(f)

def log_action(action, name, date, extra=None):
    abon_history.append({"action": action, "name": name, "date": date, "extra": extra})

def get_actions_by_date(date):
    return [entry for entry in abon_history if entry["date"] == date]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def get_check_keyboard():
    buttons = []
    for name, data in abon_data.items():
        if not data.get("deleted"):
            buttons.append([InlineKeyboardButton(name, callback_data=f"check|{name}")])
    return InlineKeyboardMarkup(buttons)

def get_rename_keyboard():
    buttons = []
    for name, data in abon_data.items():
        if not data.get("deleted"):
            buttons.append([InlineKeyboardButton(name, callback_data=f"rename|{name}")])
    return InlineKeyboardMarkup(buttons)

def get_mark_keyboard():
    buttons = []
    for name, data in abon_data.items():
        if not data.get("deleted"):
            selected = "‚úÖ " if name in abon_mark_pending else ""
            buttons.append([InlineKeyboardButton(f"{selected}{name}", callback_data=f"marktoggle|{name}")])
    if abon_mark_pending:
        buttons.append([InlineKeyboardButton("‚ûï –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ", callback_data="markconfirm")])
    return InlineKeyboardMarkup(buttons)

def get_pastuse_keyboard():
    buttons = []
    for name, data in abon_data.items():
        if not data.get("deleted"):
            buttons.append([InlineKeyboardButton(name, callback_data=f"pastuse|{name}")])
    return InlineKeyboardMarkup(buttons)

def get_date_multiselect_keyboard(name):
    buttons = []
    today = datetime.date.today()
    for i in range(30):
        day = today - datetime.timedelta(days=i)
        day_str = day.isoformat()
        selected = "‚úÖ " if name in abon_pastuse_dates and day_str in abon_pastuse_dates[name] else ""
        buttons.append([InlineKeyboardButton(f"{selected}{day_str}", callback_data=f"pastusetoggle|{name}|{day_str}")])
    if name in abon_pastuse_dates and abon_pastuse_dates[name]:
        buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è", callback_data=f"pastuseconfirm|{name}")])
    return InlineKeyboardMarkup(buttons)

# –ö–æ–º–∞–Ω–¥—ã

async def pastuse_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π:", reply_markup=get_pastuse_keyboard())

# Callback

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")

    if data[0] == "check":
        name = data[1]
        if name in abon_data:
            used = abon_data[name]["used_sessions"]
            start_date = abon_data[name].get("start_date")
            text = f"{name}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {len(used)}/8\n"
            if start_date:
                text += f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü —Å –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {start_date}"
            else:
                text += "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
            await query.edit_message_text(text)
        else:
            await query.edit_message_text("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif data[0] == "rename":
        name = data[1]
        abon_rename_pending.add(name)
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ '{name}':", reply_markup=ReplyKeyboardRemove())

    elif data[0] == "marktoggle":
        name = data[1]
        if name in abon_mark_pending:
            abon_mark_pending.remove(name)
        else:
            abon_mark_pending.add(name)
        await query.edit_message_reply_markup(reply_markup=get_mark_keyboard())

    elif data[0] == "markconfirm":
        today = datetime.date.today().isoformat()
        count = 0
        for name in abon_mark_pending:
            if name in abon_data and not abon_data[name].get("deleted"):
                if today not in abon_data[name]["used_sessions"]:
                    abon_data[name]["used_sessions"].append(today)
                    if not abon_data[name]["start_date"]:
                        abon_data[name]["start_date"] = today
                    log_action("mark", name, today)
                    count += 1
        save_abons()
        abon_mark_pending.clear()
        await query.edit_message_text(f"–û—Ç–º–µ—á–µ–Ω–æ {count} –ø–æ—Å–µ—â–µ–Ω–∏–π –Ω–∞ {today}.")

    elif data[0] == "pastuse":
        name = data[1]
        abon_pastuse_dates[name] = set()
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ '{name}':", reply_markup=get_date_multiselect_keyboard(name))

    elif data[0] == "pastusetoggle":
        name, date = data[1], data[2]
        abon_pastuse_dates.setdefault(name, set())
        if date in abon_pastuse_dates[name]:
            abon_pastuse_dates[name].remove(date)
        else:
            abon_pastuse_dates[name].add(date)
        await query.edit_message_reply_markup(reply_markup=get_date_multiselect_keyboard(name))

    elif data[0] == "pastuseconfirm":
        name = data[1]
        dates = abon_pastuse_dates.get(name, set())
        count = 0
        for date in dates:
            if name in abon_data and not abon_data[name].get("deleted"):
                if date not in abon_data[name]["used_sessions"]:
                    abon_data[name]["used_sessions"].append(date)
                    if not abon_data[name]["start_date"]:
                        abon_data[name]["start_date"] = date
                    log_action("pastuse", name, date)
                    count += 1
        save_abons()
        abon_pastuse_dates.pop(name, None)
        await query.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} –ø–æ—Å–µ—â–µ–Ω–∏–π –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("check", check_command))
app.add_handler(CommandHandler("list", list_command))
app.add_handler(CommandHandler("rename", rename_command))
app.add_handler(CommandHandler("add", add_command))
app.add_handler(CommandHandler("mark", mark_command))
app.add_handler(CommandHandler("pastuse", pastuse_command))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
